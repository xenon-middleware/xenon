// Depends on plugins
//    id 'java'
//    id 'distribution'
//    id 'maven-publish'

//    PACKAGE
// ==============
task sourcesJar(type: Jar, dependsOn: classes) {
    description "Creates jar file of Java sources"
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description "Creates jar file of javadoc"
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

task testApiJar(type: Jar) {
    description "Creates jar with test api"
    archiveBaseName = 'xenon-testapi'
    from sourceSets.testApi.output
}

task testApiSourceJar(type: Jar, dependsOn: classes) {
    description "Creates jar file of testapi Java sources"
    archiveBaseName = 'xenon-testapi'
    archiveClassifier = 'sources'
    from sourceSets.testApi.allSource
}

task docGeneratorJar(type: Jar) {
    description "Creates jar with doc generator"
    archiveBaseName = 'xenon-docgenerator'
    from sourceSets.docGenerator.output
}

task docGeneratorSourceJar(type: Jar, dependsOn: classes) {
    description "Creates jar with doc generator Java sources"
    archiveBaseName = 'xenon-docgenerator'
    archiveClassifier = 'sources'
    from sourceSets.docGenerator.allSource
}


artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}


// Distributions:
// 1. for maven, xenon.jar, xenon-sources.jar, xenon-javadoc.jar, published on JCenter
// 2. tarball, xenon.jar + deps*.jar + javadoc, published on Github release

distributions {
    main {
        contents {
            def jar = project.tasks[JavaPlugin.JAR_TASK_NAME]
            into("lib") {
                from(jar)
                from(project.configurations.runtime)
            }
            into("docs") {
                into("javadoc") {
                    from(javadoc.destinationDir)
                }
                from(sourcesJar)
                from('doc')
            }
            from {
                ['README.md',
                'LICENSE',
                'NOTICE',
                'notices'
                ]
            }
        }
    }
}

distZip.dependsOn javadoc
distTar.dependsOn javadoc
installDist.dependsOn javadoc

//     PUBLISH
// ==============

/*
uploadArchives {

  repositories {
    mavenDeployer {

      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: System.getenv('OSSRH_USER'), password: System.getenv('OSSRH_KEY'))
      }

      snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: System.getenv('OSSRH_USER'), password: System.getenv('OSSRH_KEY'))
      }

      pom.project {
        name 'Xenon'
        packaging 'jar'
        // optionally artifactId can be defined here
        description description
        url 'https://xenon-middleware.github.io/xenon'

        scm {
          connection 'scm:git:https://github.com/xenon-middleware/xenon.git'
          developerConnection 'scm:git:https://github.com/xenon-middleware/xenon.git'
          url 'https://github.com/xenon-middleware/xenon'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'jmaassen'
            name 'Jason Maassen'
            email 'j.maassen@esciencecenter.nl'
          }
        }
      }
    }
  }
}
*/

/*
publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'nl.esciencecenter.xenon'
            artifactId 'xenon'
            version version

            artifact sourcesJar
            artifact javadocJar
        }
        TestApiPublication(MavenPublication) {
            groupId 'nl.esciencecenter.xenon'
            artifactId 'xenon-testapi'
            version version

            artifact testApiJar
            artifact testApiSourceJar

            pom {
                url = "https://xenon-middleware.github.io/xenon"
                description = "Abstract classes for Xenon adaptor integration tests"
                url = "https://github.com/xenon-middleware/xenon"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/xenon-middleware/xenon.git"
                    url = "https://github.com/xenon-middleware/xenon"
                }
            }
            // Add dependencies.testApiCompile to publication
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.testApiCompile.allDependencies.each {
                    if (it.group) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
                // Xenon is added as sourceSets.main.output, which cannot be resolved to a dependency, so add manually
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', 'nl.esciencecenter.xenon')
                dependencyNode.appendNode('artifactId', 'xenon')
                dependencyNode.appendNode('version', version)
            }
        }
        DocGeneratorPublication(MavenPublication) {
            groupId 'nl.esciencecenter.xenon'
            artifactId 'xenon-docgenerator'
            version version
            artifact docGeneratorJar
            artifact docGeneratorSourceJar
            pom {
                url = "https://xenon-middleware.github.io/xenon"
                description = "Class to generate documentation for all Xenon adaptors in class path"
                url = "https://github.com/xenon-middleware/xenon"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/xenon-middleware/xenon.git"
                    url = "https://github.com/xenon-middleware/xenon"
                }
            }
            // Add dependencies.testApiCompile to publication
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                // Xenon is added as sourceSets.main.output, which cannot be resolved to a dependency, so add manually
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', 'nl.esciencecenter.xenon')
                dependencyNode.appendNode('artifactId', 'xenon')
                dependencyNode.appendNode('version', version)
            }
        }
        LiveTestPublication(MavenPublication) {
            groupId 'nl.esciencecenter.xenon'
            artifactId 'xenon-livetest'
            version version

            artifact liveTestJar
        }
    }
    repositories {
        maven {
            name = 'TestApiRepo'
            url = 'https://api.bintray.com/maven/nlesc/xenon/xenon-testapi/;publish=1'
            credentials {
                username = System.getenv('BINTRAY_USER')
                password = System.getenv('BINTRAY_KEY')
            }
        }
        maven {
            name = 'DocGeneratorRepo'
            url = 'https://api.bintray.com/maven/nlesc/xenon/xenon-docgenerator/;publish=1'
            credentials {
                username = System.getenv('BINTRAY_USER')
                password = System.getenv('BINTRAY_KEY')
            }
        }
    }
}
*/
